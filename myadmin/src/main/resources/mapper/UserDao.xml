<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.admin.dao.UserDao">

    <select id="queryByPhone" resultType="User">
		SELECT *
		FROM admin_user
		WHERE 
		user_phone= #{userPhone} limit 1
	</select>

    <select id="queryAll" resultType="User">
		SELECT *
		FROM admin_user
		ORDER BY create_time DESC
		limit #{offset},#{limit}
	</select>


    <update id="addScore">
		UPDATE admin_user
		SET 
		score = score + #{add}
	</update>


    <insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="userId">
        <!--insert into admin_user(user_name,user_phone,create_time,score,user_password,pic,sex,user_email) values(#{userName},#{userPhone},#{createTime},#{score},#{userPassword},#{pic},#{sex},#{userEmail})-->
        INSERT INTO admin_user (user_name,user_phone,create_time,score,user_password,pic,sex,user_email,status)
        SELECT #{userName},#{userPhone},#{createTime},#{score},#{userPassword},#{pic},#{sex},#{userEmail},#{status}
        FROM DUAL
        WHERE NOT EXISTS (SELECT * FROM admin_user WHERE user_name =#{userName});

    </insert>


    <delete id="delUser" parameterType="String">
		delete from  admin_user where user_id=#{user_id}
	</delete>


    <select id="login" resultType="int" parameterType="User">
		SELECT count(*)
         FROM admin_user where  user_name=#{userName} and  user_password=#{userPassword} and status=1
	</select>


    <insert id="addUserList" parameterType="List">
        insert admin_user (user_name,user_phone,create_time,score,user_password,pic,sex) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.userName},#{item.userPhone},#{item.createTime},#{item.score},#{item.userPassword},#{item.pic},#{item.sex})
        </foreach>
    </insert>

    <select id="getUserList" resultType="User">
        SELECT *
        FROM admin_user

        <where>
            <if test="keyword!=null">
                user_name LIKE CONCAT(CONCAT('%', #{keyword}), '%')
            </if>

        </where>
        ORDER BY user_id desc limit #{offset},#{limit}
    </select>


    <!--用户批量删除,逻辑删除-->
    <delete id="falseDelete" parameterType="String">
        delete from admin_user where user_id in
        <foreach collection="array" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>


    <select id="getUserCount" resultType="int">
        SELECT count(*)
        FROM admin_user
        <where>
            <if test="keyword!=null">
                user_name LIKE CONCAT(CONCAT('%', #{keyword}), '%')
            </if>

        </where>
    </select>


    <update id="updateLoginInfo" parameterType="User">
		UPDATE admin_user
		SET
		login_time = #{loginTime} , login_ip=#{loginIp}   where user_name=#{userName}
	</update>


    <insert id="addUserRoleList" parameterType="List">
        insert user_role (user_id,role_id) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.userId},#{item.roleId})
        </foreach>
    </insert>


    <select id="getUserById" resultType="User" parameterType="int">
		SELECT * FROM admin_user where user_id=#{userid}
	</select>


    <select id="getUserRoleById" resultType="UserRole" parameterType="int">
		SELECT *  FROM user_role where user_id=#{userid}
	</select>

    <update id="updateUserInfoByUser" parameterType="User">
		UPDATE admin_user
		SET
		user_name = #{userName} , user_phone=#{userPhone},user_password=#{userPassword},pic=#{pic},sex=#{sex},user_email=#{userEmail},status=#{status}   where user_id=#{userId}
	</update>


    <delete id="delUserRoleByUserId" parameterType="int">
		delete from  user_role where user_id=#{userid}
	</delete>

    <select id="getUserByName" resultType="User" parameterType="String">
        SELECT * FROM admin_user where user_name=#{userName}
    </select>


    <update id="updateUserStatus" parameterType="int">
        UPDATE admin_user
        SET  status=#{status}   where user_id=#{userid}
    </update>


    <select id="getUserRoleByUserId" resultType="Role" parameterType="int" >
        select GROUP_CONCAT(role_name) role_name from  user_role a, admin_role b  where a.role_id=b.id and a.user_id=#{userid}
    </select>


    <select id="getPermissionsListByUserId" resultType="PermissionsList" parameterType="int" >
       SELECT a.user_id,b.role_id,b.resource_id,c.title,c.url,c.parent_id from user_role a LEFT JOIN role_resource b on a.role_id=b.role_id JOIN admin_resource c on b.resource_id=c.id WHERE a.user_id=#{userid} GROUP BY b.resource_id
    </select>



    <!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路径 -->

    <!--
      <insert id="add" parameterType="User">
          insert into user(username, age) values(#{username},#{age})
      </insert>

      <update id="update" parameterType="User">
          update user set username=#{username},age=#{age} where user_id=#{user_id}
      </update>

      <delete id="delete" parameterType="int">
          delete from user where user_id=#{user_id}
      </delete>

      <select id="findById" parameterType="int" resultType="User">
          select user_id user_id,username username,age age from user where user_id=#{user_id}
      </select>

      <select id="findAll" resultType="User">
          select user_id user_id,username username,age age from user
      </select>
      -->


    <!--
      <sql id="financialColumns">
        a.id AS "id",
        a.identification AS "identification",
        a.qualification_classify AS "qualificationClassify",
        a.qualification_num AS "qualificationNum",
        a.company AS "company",
        a.city_location AS "cityLocation",
        a.good_field AS "goodField",
        a.personal_profile AS "personalProfile",
        a.qualification_status AS "qualificationStatus",
        a.apply_time AS "applyTime",
        a.authentication_time AS "authenticationTime",
        a.account AS "account"
    </sql>

    <select id="queryListPage"
        parameterType="java.lang.Integer" resultMap="financialResult">
        select 
        <include refid="financialColumns" />
         from yryz_financial a limit #{start},#{end}
    </select>
    -->

</mapper>